import std/[times, strutils, tables]
import ../types/[enums, package, config]
import ../core/risk_analyzer
import ../data/all_packages
import section_formatter

type
  PackagesBySection = Table[Section, seq[Package]]

proc organizePackagesBySection(packages: seq[Package], riskProfiles: seq[string]): 
    tuple[toRemove: PackagesBySection, skipped: seq[tuple[pkg: Package, reason: string]]] =
  result.toRemove = initTable[Section, seq[Package]]()
  result.skipped = @[]
  
  for pkg in packages:
    let (skip, reason) = shouldSkipPackage(pkg, riskProfiles)
    if skip:
      result.skipped.add((pkg, reason))
    else:
      if not result.toRemove.hasKey(pkg.section):
        result.toRemove[pkg.section] = @[]
      result.toRemove[pkg.section].add(pkg)

proc generateDebloatFile*(config: Config, outputPath: string) =
  let now = now().format("yyyy-MM-dd HH:mm:ss")
  let (toRemove, skipped) = organizePackagesBySection(allPackages, config.riskProfiles)
  
  var f = open(outputPath, fmWrite)
  defer: f.close()
  
  # File header
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "# CRAFT FOSSIFIER - Debloat Commands"
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "# Generated: " & now
  if config.deviceName != "":
    f.writeLine "# Device: " & config.deviceName & " (" & config.codename & ")"
  else:
    f.writeLine "# Device: Unknown / User-specified"
  
  if config.riskProfiles.len > 0:
    f.writeLine "# Risk profiles: " & config.riskProfiles.join(", ")
  else:
    f.writeLine "# Risk profiles: NONE (--unsafe mode)"
  
  f.writeLine "#"
  f.writeLine "# This file is organized from SAFEST to MOST DANGEROUS removals."
  f.writeLine "# Read each section carefully before executing commands."
  f.writeLine "# You can execute sections selectively based on your needs."
  f.writeLine "# " & "=".repeat(76)
  
  var totalCommands = 0
  var skippedInSection: Table[Section, seq[tuple[pkg: Package, reason: string]]]
  
  # Group skipped packages by section
  for item in skipped:
    if not skippedInSection.hasKey(item.pkg.section):
      skippedInSection[item.pkg.section] = @[]
    skippedInSection[item.pkg.section].add(item)
  
  # Write each section
  for section in Section.low .. Section.high:
    f.write getSectionHeader(section)
    
    # Show skipped packages in this section
    if skippedInSection.hasKey(section):
      f.writeLine "# ⚠️  SKIPPED in this section (risky for your profile):"
      for item in skippedInSection[section]:
        f.writeLine "# - " & item.pkg.packageName & " (" & item.reason & ")"
      f.writeLine "#"
      f.writeLine "# Safe to remove in this section:"
      f.writeLine ""
    
    # Write commands or comment them out based on section
    if toRemove.hasKey(section):
      for pkg in toRemove[section]:
        let prefix = if section == sec7CameraLauncher or section == sec10GoogleServices: "# " else: ""
        f.writeLine prefix & "adb shell pm uninstall -k --user 0 " & pkg.packageName
        totalCommands.inc()
  
  # Footer
  f.writeLine "\n\n# " & "=".repeat(76)
  f.writeLine "# END OF DEBLOAT COMMANDS"
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "#"
  f.writeLine "# AFTER RUNNING THESE COMMANDS:"
  f.writeLine "# 1. Reboot your device: adb reboot"
  f.writeLine "# 2. Test everything works"
  f.writeLine "# 3. If something breaks, use restore.txt to undo"
  f.writeLine "#"
  f.writeLine "# Total commands in this file: " & $totalCommands
  f.writeLine "# Skipped (risky): " & $skipped.len
  f.writeLine "# Sections: 10 (from safest to most dangerous)"
  f.writeLine "#"
  f.writeLine "# Generated by craft_fossifier - https://github.com/username/craft-fossifier"
  f.writeLine "# " & "=".repeat(76)

proc generateRestoreFile*(config: Config, outputPath: string) =
  let now = now().format("yyyy-MM-dd HH:mm:ss")
  let (toRemove, _) = organizePackagesBySection(allPackages, config.riskProfiles)
  
  var f = open(outputPath, fmWrite)
  defer: f.close()
  
  # File header
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "# CRAFT FOSSIFIER - Restore Commands"
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "# Generated: " & now
  if config.deviceName != "":
    f.writeLine "# Device: " & config.deviceName & " (" & config.codename & ")"
  f.writeLine "#"
  f.writeLine "# This file restores all packages removed by debloat.txt"
  f.writeLine "# Organized in the same sections for easy selective restoration"
  f.writeLine "# " & "=".repeat(76)
  
  var totalCommands = 0
  
  # Write each section
  for section in Section.low .. Section.high:
    let divider = "\n# " & "=".repeat(76) & "\n"
    f.write divider
    f.writeLine "# SECTION " & $ord(section) & ": " & (case section
      of sec1AbsoluteTrash: "ABSOLUTE TRASH"
      of sec2VendorBloat: "VENDOR BLOAT"
      of sec3UselessFeatures: "USELESS FEATURES"
      of sec4VendorSecurity: "VENDOR SECURITY"
      of sec5QualcommCarrier: "QUALCOMM & CARRIER"
      of sec6StockApps: "STOCK APPS"
      of sec7CameraLauncher: "CAMERA & LAUNCHER"
      of sec8GoogleBloat: "GOOGLE BLOAT"
      of sec9PlayStore: "PLAY STORE"
      of sec10GoogleServices: "GOOGLE SERVICES")
    f.write divider
    
    if toRemove.hasKey(section):
      for pkg in toRemove[section]:
        f.writeLine "adb shell cmd package install-existing " & pkg.packageName
        totalCommands.inc()
  
  # Footer
  f.writeLine "\n# " & "=".repeat(76)
  f.writeLine "# END OF RESTORE COMMANDS"
  f.writeLine "# " & "=".repeat(76)
  f.writeLine "# Total restore commands: " & $totalCommands
  f.writeLine "# " & "=".repeat(76)